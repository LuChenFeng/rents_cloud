<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="pers.lcf.rents.userbase.mapper.UserInfoMapper">
    <resultMap id="BaseResultMap" type="pers.lcf.rents.userbase.model.UserInfo">
        <result column="id" jdbcType="VARCHAR" property="id"/>
        <result column="user_login_id" jdbcType="VARCHAR" property="userLoginId"/>
        <result column="rents_group_id" jdbcType="VARCHAR" property="rentsGroupId"/>
        <result column="user_name" jdbcType="VARCHAR" property="userName"/>
        <result column="avatar" jdbcType="VARCHAR" property="avatar"/>
        <result column="sex" jdbcType="CHAR" property="sex"/>
        <result column="has_real_name" jdbcType="TINYINT" property="hasRealName"/>
        <result column="birthady" jdbcType="TIMESTAMP" property="birthady"/>
        <result column="tel" jdbcType="VARCHAR" property="tel"/>
        <result column="statement" jdbcType="VARCHAR" property="statement"/>
        <result column="report_sum" jdbcType="INTEGER" property="reportSum"/>
        <result column="gmt_create" jdbcType="TIMESTAMP" property="gmtCreate"/>
        <result column="gmt_modified" jdbcType="TIMESTAMP" property="gmtModified"/>
    </resultMap>

    <!--    管理员 普通用户信息管理-->
    <resultMap id="OrdinaryUserMap" type="pers.lcf.rents.adminbase.model.OrdinaryUser">
        <result column="id" jdbcType="VARCHAR" property="id"/>
        <result column="login_name" jdbcType="VARCHAR" property="loginName"/>
        <result column="user_name" jdbcType="VARCHAR" property="userName"/>
        <result column="avatar" jdbcType="VARCHAR" property="avatar"/>
        <result column="sex" jdbcType="CHAR" property="sex"/>
        <result column="has_real_name" jdbcType="TINYINT" property="hasRealName"/>
        <result column="birthady" jdbcType="TIMESTAMP" property="birthady"/>
        <result column="tel" jdbcType="VARCHAR" property="tel"/>
        <result column="is_state" jdbcType="TINYINT" property="isState"/>
        <result column="report_sum" jdbcType="INTEGER" property="reportSum"/>
        <result column="gmt_create" jdbcType="TIMESTAMP" property="gmtCreate"/>
        <result column="report_sum" jdbcType="INTEGER" property="postsSum"/>
    </resultMap>
    <resultMap id="CountMap" type="Integer">
        <result column="count" jdbcType="INTEGER" javaType="Integer"/>
    </resultMap>
    <resultMap id="ordinaryUsersPeiMap" type="pers.lcf.rents.adminbase.model.OrdinaryUsersPei">
        <result column="man" jdbcType="INTEGER" property="man"/>
        <result column="woman" jdbcType="INTEGER" property="woman"/>
        <result column="yesreal" jdbcType="INTEGER" property="yesreal"/>
        <result column="noreal" jdbcType="INTEGER" property="noreal"/>
        <result column="normal" jdbcType="INTEGER" property="normal"/>
        <result column="unnormal" jdbcType="INTEGER" property="unnormal"/>
    </resultMap>
    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Update_By_Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Base_Column_List">
        <!--
          WARNING - @mbg.generated
          This element is automatically generated by MyBatis Generator, do not modify.
          This element was generated on Mon Oct 21 20:58:09 CST 2019.
        -->
        id, user_login_id, rents_group_id, user_name, avatar, sex, has_real_name, birthady,
        tel, statement, report_sum, gmt_create, gmt_modified
    </sql>
    <!--    管理员 普通用户信息管理-->
    <select id="getOrdinaryUsersByDTO"
            resultMap="OrdinaryUserMap,CountMap">
        select SQL_CALC_FOUND_ROWS
        ui.id,
        ul.login_name,
        ui.user_name,
        ui.avatar,
        ui.sex,
        ui.has_real_name,
        ui.tel,
        ui.birthady,
        ul.is_state,
        ui.report_sum,
        ul.gmt_create,
        (SELECT COUNT(*) AS id FROM `posts_info` WHERE `posts_info`.user_info_id=ui.id) posts_sum
        FROM
        `user_info` ui, `user_login` ul , `user_type` ut
        <where>
            ui.user_login_id=ul.id AND ut.id=ul.user_type_id AND ut.user_type_name=#{record.userTypeName}
            <if test="record.loginName != null and record.loginName != ''">
                AND ul.login_name like '%${record.loginName}%'
            </if>
            <if test="record.userName != null and record.userName != ''">
                AND ui.user_name like '%${record.userName}%'
            </if>
            <if test="record.sex != null and record.sex != ''">
                AND ui.sex =#{record.sex}
            </if>
            <if test="record.hasRealName != null  ">
                AND ui.has_real_name =#{record.hasRealName}
            </if>
            <if test="record.isState != null">
                AND ul.is_state =#{record.isState}
            </if>
            <if test="record.tel != null and record.tel !='' ">
                AND ui.tel like '%${record.tel}%'
            </if>
            <if test="record.gmtCreateBegin != null and record.gmtCreateEnd !=null ">
                AND ul.gmt_create &gt; #{record.gmtCreateBegin} AND ul.gmt_create &lt; #{record.gmtCreateEnd}
            </if>

        </where>
        LIMIT #{start}, #{end};
        SELECT FOUND_ROWS() AS count ;
    </select>
<!--    普通用户饼图信息-->
    <select id="getOrdinaryUsersPei" resultMap="ordinaryUsersPeiMap">
        SELECT
            ( SELECT COUNT( * ) AS id FROM `user_info` WHERE `user_info`.sex = '男' ) man,
            ( SELECT COUNT( * ) AS id FROM `user_info` WHERE `user_info`.sex = '女' ) woman,
            ( SELECT COUNT( * ) AS id FROM `user_info` WHERE `user_info`.has_real_name = 1 ) yesreal,
            ( SELECT COUNT( * ) AS id FROM `user_info` WHERE `user_info`.has_real_name = 0 ) noreal,
            ( SELECT COUNT( * ) AS id FROM `user_login` WHERE `user_login`.is_state = 1 ) normal ,
            ( SELECT COUNT( * ) AS id FROM `user_login` WHERE `user_login`.is_state = 0 ) unnormal
        FROM
            `user_info` ui,
            `user_login` ul,
            `user_type` ut
        WHERE
            ui.user_login_id = ul.id
            AND ut.id = ul.user_type_id
            AND ut.user_type_name = '会员用户'
            LIMIT 0,1;
    </select>
    <select id="getUserInfoByLoginId" parameterType="String" resultMap="BaseResultMap">
    SELECT ui.* FROM `user_info` ui, `user_login` ul
     WHERE ul.login_name=#{loginName}
     and ui.user_login_id=ul.id

  </select>
    <select id="selectByExample" parameterType="pers.lcf.rents.userbase.model.UserInfoExample"
            resultMap="BaseResultMap">

        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        from user_info
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>
    <delete id="delOrdinaryUserById" parameterType="java.util.List">
        DELETE user_info,user_login
        FROM user_info
        LEFT OUTER JOIN user_login
        ON user_info.user_login_id=user_login.id
        WHERE user_info.id
        <foreach collection="list" item="item" index="index" separator="," open="in(" close=")">
            #{item}
        </foreach>

    </delete>
    <delete id="deleteByExample" parameterType="pers.lcf.rents.userbase.model.UserInfoExample">
        <!--
          WARNING - @mbg.generated
          This element is automatically generated by MyBatis Generator, do not modify.
          This element was generated on Mon Oct 21 20:58:09 CST 2019.
        -->
        delete from user_info
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </delete>
    <insert id="insert" parameterType="pers.lcf.rents.userbase.model.UserInfo">
        <!--
          WARNING - @mbg.generated
          This element is automatically generated by MyBatis Generator, do not modify.
          This element was generated on Mon Oct 21 20:58:09 CST 2019.
        -->
        insert into user_info (id, user_login_id, rents_group_id,
        user_name, avatar, sex,
        has_real_name, birthady, tel,
        statement, report_sum, gmt_create,
        gmt_modified)
        values (#{id,jdbcType=VARCHAR}, #{userLoginId,jdbcType=VARCHAR}, #{rentsGroupId,jdbcType=VARCHAR},
        #{userName,jdbcType=VARCHAR}, #{avatar,jdbcType=VARCHAR}, #{sex,jdbcType=CHAR},
        #{hasRealName,jdbcType=TINYINT}, #{birthady,jdbcType=TIMESTAMP}, #{tel,jdbcType=VARCHAR},
        #{statement,jdbcType=VARCHAR}, #{reportSum,jdbcType=INTEGER}, #{gmtCreate,jdbcType=TIMESTAMP},
        #{gmtModified,jdbcType=TIMESTAMP})
    </insert>
    <insert id="insertSelective" parameterType="pers.lcf.rents.userbase.model.UserInfo">
        <!--
          WARNING - @mbg.generated
          This element is automatically generated by MyBatis Generator, do not modify.
          This element was generated on Mon Oct 21 20:58:09 CST 2019.
        -->
        insert into user_info
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="userLoginId != null">
                user_login_id,
            </if>
            <if test="rentsGroupId != null">
                rents_group_id,
            </if>
            <if test="userName != null">
                user_name,
            </if>
            <if test="avatar != null">
                avatar,
            </if>
            <if test="sex != null">
                sex,
            </if>
            <if test="hasRealName != null">
                has_real_name,
            </if>
            <if test="birthady != null">
                birthady,
            </if>
            <if test="tel != null">
                tel,
            </if>
            <if test="statement != null">
                statement,
            </if>
            <if test="reportSum != null">
                report_sum,
            </if>
            <if test="gmtCreate != null">
                gmt_create,
            </if>
            <if test="gmtModified != null">
                gmt_modified,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=VARCHAR},
            </if>
            <if test="userLoginId != null">
                #{userLoginId,jdbcType=VARCHAR},
            </if>
            <if test="rentsGroupId != null">
                #{rentsGroupId,jdbcType=VARCHAR},
            </if>
            <if test="userName != null">
                #{userName,jdbcType=VARCHAR},
            </if>
            <if test="avatar != null">
                #{avatar,jdbcType=VARCHAR},
            </if>
            <if test="sex != null">
                #{sex,jdbcType=CHAR},
            </if>
            <if test="hasRealName != null">
                #{hasRealName,jdbcType=TINYINT},
            </if>
            <if test="birthady != null">
                #{birthady,jdbcType=TIMESTAMP},
            </if>
            <if test="tel != null">
                #{tel,jdbcType=VARCHAR},
            </if>
            <if test="statement != null">
                #{statement,jdbcType=VARCHAR},
            </if>
            <if test="reportSum != null">
                #{reportSum,jdbcType=INTEGER},
            </if>
            <if test="gmtCreate != null">
                #{gmtCreate,jdbcType=TIMESTAMP},
            </if>
            <if test="gmtModified != null">
                #{gmtModified,jdbcType=TIMESTAMP},
            </if>
        </trim>
    </insert>
    <select id="countByExample" parameterType="pers.lcf.rents.userbase.model.UserInfoExample"
            resultType="java.lang.Long">
        <!--
          WARNING - @mbg.generated
          This element is automatically generated by MyBatis Generator, do not modify.
          This element was generated on Mon Oct 21 20:58:09 CST 2019.
        -->
        select count(*) from user_info
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <update id="updateByExampleSelective" parameterType="map">

        update user_info
        <set>
            <if test="record.id != null">
                id = #{record.id,jdbcType=VARCHAR},
            </if>
            <if test="record.userLoginId != null">
                user_login_id = #{record.userLoginId,jdbcType=VARCHAR},
            </if>
            <if test="record.rentsGroupId != null">
                rents_group_id = #{record.rentsGroupId,jdbcType=VARCHAR},
            </if>
            <if test="record.userName != null">
                user_name = #{record.userName,jdbcType=VARCHAR},
            </if>
            <if test="record.avatar != null">
                avatar = #{record.avatar,jdbcType=VARCHAR},
            </if>
            <if test="record.sex != null">
                sex = #{record.sex,jdbcType=CHAR},
            </if>
            <if test="record.hasRealName != null">
                has_real_name = #{record.hasRealName,jdbcType=TINYINT},
            </if>
            <if test="record.birthady != null and record.birthady !=''">
                birthady = #{record.birthady,jdbcType=TIMESTAMP},
            </if>
            <if test="record.tel != null">
                tel = #{record.tel,jdbcType=VARCHAR},
            </if>
            <if test="record.statement != null">
                statement = #{record.statement,jdbcType=VARCHAR},
            </if>
            <if test="record.reportSum != null">
                report_sum = #{record.reportSum,jdbcType=INTEGER},
            </if>
            <if test="record.gmtCreate != null and record.gmtCreate !=''">
                gmt_create = #{record.gmtCreate,jdbcType=TIMESTAMP},
            </if>
            <if test="record.gmtModified != null">
                gmt_modified = #{record.gmtModified,jdbcType=TIMESTAMP},
            </if>
        </set>
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByExample" parameterType="map">
        <!--
          WARNING - @mbg.generated
          This element is automatically generated by MyBatis Generator, do not modify.
          This element was generated on Mon Oct 21 20:58:09 CST 2019.
        -->
        update user_info
        set id = #{record.id,jdbcType=VARCHAR},
        user_login_id = #{record.userLoginId,jdbcType=VARCHAR},
        rents_group_id = #{record.rentsGroupId,jdbcType=VARCHAR},
        user_name = #{record.userName,jdbcType=VARCHAR},
        avatar = #{record.avatar,jdbcType=VARCHAR},
        sex = #{record.sex,jdbcType=CHAR},
        has_real_name = #{record.hasRealName,jdbcType=TINYINT},
        birthady = #{record.birthady,jdbcType=TIMESTAMP},
        tel = #{record.tel,jdbcType=VARCHAR},
        statement = #{record.statement,jdbcType=VARCHAR},
        report_sum = #{record.reportSum,jdbcType=INTEGER},
        gmt_create = #{record.gmtCreate,jdbcType=TIMESTAMP},
        gmt_modified = #{record.gmtModified,jdbcType=TIMESTAMP}
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
</mapper>